{
  "name": "anysort",
  "version": "1.0.1",
  "description": "Sorting and matching utility using configurable string, glob, regular expression, and/or function matchers",
  "files": [
    "index.js"
  ],
  "author": {
    "name": "Elan Shanker",
    "url": "http://github.com/es128"
  },
  "homepage": "https://github.com/es128/anysort",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/es128/anysort.git"
  },
  "bugs": {
    "url": "https://github.com/es128/anysort/issues"
  },
  "keywords": [
    "sort",
    "array",
    "match",
    "any",
    "string",
    "file",
    "fs",
    "list",
    "glob",
    "regex",
    "regexp",
    "regular",
    "expression",
    "function"
  ],
  "dependencies": {
    "anymatch": "~1.3.0"
  },
  "scripts": {
    "test": "istanbul cover _mocha && cat ./coverage/lcov.info | coveralls"
  },
  "license": "ISC",
  "devDependencies": {
    "coveralls": "~2.11.2",
    "mocha": "~2.0.1",
    "istanbul": "~0.3.2"
  },
  "readme": "anysort [![Build Status](https://travis-ci.org/es128/anysort.svg)](https://travis-ci.org/es128/anysort) [![Coverage Status](https://img.shields.io/coveralls/es128/anysort.svg)](https://coveralls.io/r/es128/anysort)\n=======\nJavascript module to sort arrays of strings using flexible arrays of matchers.\nRegular expressions, globs, plain strings, or functions may be used as matchers\n([see anymatch](https://github.com/es128/anymatch)).\n\n[![NPM](https://nodei.co/npm/anysort.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/anysort/)\n[![NPM](https://nodei.co/npm-dl/anysort.png?height=3&months=9)](https://nodei.co/npm-dl/anysort/)\n\nUsage\n-----\n```sh\nnpm install anysort --save\n```\n\n#### anysort ([a, b,] [matchers])\nIntended for use in an [`Array.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\ncallback. `matchers` is an array of [anymatch](https://github.com/es128/anymatch)\ncompatible matchers.`a` and `b` are two values to be compared. If called with\nonly `matchers`, returns a function (the `Array.sort` callback). If `matchers`\nis omitted, the array will be sorted naturally (alphabetically). Natural sort\nwill also be used in case of a tie (multiple members matching the same matcher).\n\n```js\nvar anysort = require('anysort');\n\nvar unsorted = [\n\t'path/to/foo.js',\n\t'path/to/bar.js',\n\t'bar.js',\n\t'path/anyjs/baz.js',\n\t'path/anyjs/aaz.js',\n\t'path/to/file.js'\n\t'path/anyjs/caz.js',\n];\n\nvar matchers = [\n\t'path/to/file.js',\n\t'path/anyjs/**/*.js',\n\t/foo.js$/,\n\tfunction (string) {\n\t\treturn string.indexOf('bar') !== -1 && string.length > 10\n\t}\n];\n\n// the following two are equivalent\nunsorted.sort(anysort(matchers));\n\nunsorted.sort(function (a, b){\n\t// except there is an opportunity to run your own\n\t// operations/mutations on a and b here if needed\n\treturn anysort(a, b, matchers);\n});\n/*\n[ 'path/to/file.js',\n\t'path/anyjs/aaz.js',\n\t'path/anyjs/baz.js',\n\t'path/anyjs/caz.js',\n\t'path/to/foo.js',\n\t'path/to/bar.js',\n\t'bar.js' ]\n*/\n```\n\n#### anysort.splice (list, [matchers], [tieBreakers])\nSorts the whole array. Returns an object with `sorted`, `matched`, and\n`unmatched` properties. `matched` is a sorted array of the `list` members that\nmatched any of the `matchers`. `unmatched` is an array of the `list` members\nthat didn't match any `matchers`, sorted natively. `sorted` is a concatenation\nof `matched` and `unmatched`. `tieBreakers` can optionally be specified as a \nsecond set of matchers which will not cause inclusion in the `matched` set, but\nwill be used for fallback sorting in case of ties caused by multiple `list`\narray members matching the same matcher. `tieBreakers` must be an array.\n\n```js\nanysort.splice(unsorted, matchers);\n/*\n{ matched:\n\t [ 'path/to/file.js',\n\t\t 'path/anyjs/aaz.js',\n\t\t 'path/anyjs/baz.js',\n\t\t 'path/anyjs/caz.js',\n\t\t 'path/to/foo.js',\n\t\t 'path/to/bar.js' ],\n\tunmatched: [ 'bar.js' ],\n\tsorted:\n\t [ 'path/to/file.js',\n\t\t 'path/anyjs/aaz.js',\n\t\t 'path/anyjs/baz.js',\n\t\t 'path/anyjs/caz.js',\n\t\t 'path/to/foo.js',\n\t\t 'path/to/bar.js',\n\t\t 'bar.js' ] }\n*/\n\n// quick access to just the sorted array\nanysort.splice(unsorted, matchers).sorted;\n```\n\n#### anysort.grouped (list, [groupedMatchers], [order])\nAllows use of an array of matcher arrays and arbitrary placement of the\nunmatched list members, which is useful if you want to define some to definitely\ngo at the bottom. Also, can be used to create exclusion sets.\n\n`groupedMatchers` should be put in order of priority (in case a `list` member\nmight match multiple). Include the string `'unmatched'` as a top-level member of\n`groupedMatchers` to set the position of any members that do not match any\nmatchers, otherwise it is assumed to belong at the end. `groupedMatchers` also\nsets the order of results, unless an `order` array is defined to override it. If\nan `order` is provided that omits any of the indexes from `groupedMatchers`, the\ncorresponding matches will be excluded from the output.\n\n```js\nvar before = /to/;\nvar after = ['path/anyjs/baz.js', 'path/anyjs/aaz.js'];\nanysort.grouped(unsorted, [before, 'unmatched', after]);\n/*\n[ 'path/to/bar.js',\n\t'path/to/file.js',\n\t'path/to/foo.js',\n\t'bar.js',\n\t'path/anyjs/caz.js',\n\t'path/anyjs/baz.js',\n\t'path/anyjs/aaz.js' ]\n*/\n\nvar exclusions = /anyjs/;\n// 2 is the index for unmatched list members\nanysort.grouped(unsorted, [exclusions, matchers], [2, 1]);\n/*\n[ 'bar.js',\n\t'path/to/file.js',\n\t'path/to/foo.js',\n\t'path/to/bar.js' ]\n*/\n```\n\nChange Log\n----------\n[See release notes page on GitHub](https://github.com/es128/anymatch/releases)\n\nLicense\n-------\n[ISC](https://raw.github.com/es128/anysort/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "anysort@1.0.1",
  "_from": "anysort@>=1.0.0 <1.1.0"
}
